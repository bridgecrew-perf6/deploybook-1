{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/flask-gigatutorial/","result":{"data":{"site":{"siteMetadata":{"title":"Flask Deployment Giga-Tutorial","author":"Joe Walsh"}},"mdx":{"id":"214c33f3-f191-533a-88e0-7470fd445473","excerpt":"Hello World Welcome! You are about to start on a journey toward deploying a working web application with Python and Flask. When you have finished, theâ€¦","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/content/blog\",\n  \"date\": \"2021-12-31T00:36:17.177Z\",\n  \"title\": \"flask giga tutorial\",\n  \"description\": \"in-depth deployment tutorial for Flask, Python, Postgres, Digital Ocean, Nginx, Gunicorn and more!\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Hello World\"), mdx(\"p\", null, \"Welcome! You are about to start on a journey toward deploying a working web application with Python and Flask. When you have finished, the application you make will be live on the web and you will be able to access it from your phone or computer - anywhere you have internet access.\"), mdx(\"p\", null, \"The goal of the first part of this book is to deploy a web application to a remote server and then configure that server so you can view your application from any web browser. The focus of our work is on serving the simplest possible secure deployment so that you can demonstrate to yourself that it is possible.\"), mdx(\"p\", null, \"More specifically, we will be deploying a minimal Flask application onto a Digital Ocean server and then serving it over HTTPS on Nginx and Gunicorn.\"), mdx(\"p\", null, \"In the interest of keeping the writing focused, the guide will be provided with the assumption that you have access to a Bash or other Linux-based terminal. I use a Windows PC with the Windows Subsystem for Linux 2 (WSL2) enabled. If you are using a Windows PC I strongly suggest that you setup a Linux environment. Recent versions of Windows can enable the environment with one line of code: see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.microsoft.com/en-us/windows/wsl/install\"\n  }, \"Install WSL2\"), \". While deployment using Powershell or the Windows commandline is certainly possible, modern web deployment proceeds on Linux and you will find that most documentation, tutorials, and tools have been created with Linux and Bash users in mind.\"), mdx(\"p\", null, \"Another point to mention at the outset: unfortunately, DigitalOcean and most DNS providers do charge and will require a credit or debit card to setup an active account. However, costs will be minimized: you can expect to pay around $5 per month for a DigitalOcean virtual private server(VPS) and you can register your domain name for less than $10 (there are also free options but I will not be recommending them). If this is a limitation for you, there are plenty of ways to deploy from computers that you already own. However, this is not the focus of this guide.\"), mdx(\"p\", null, \"Another assumption I am making is that you have an existing installation of Python 3 on your computer. To check your installation and version, you can use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ python3 --version\\n\")), mdx(\"p\", null, \"If you have a Windows computer and have enabled WSL2, the Ubuntu distribution that WSL2 uses comes with a version of Python 3.\"), mdx(\"h3\", null, \"Install Flask on your Local Computer\"), mdx(\"p\", null, \"In the next step, we are going to install Flask on your computer. This step has no practical effect on your eventual deployment but it will give us a chance to practice locally what we will soon be doing on a remote server.\"), mdx(\"p\", null, \"In this step, we will be creating a directory for our Flask app, activating a virtual environment, and writing a couple of very short Python files that will allow us to test a local Flask deployment. Finally, we will be working briefly with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"git\"), \".\"), mdx(\"p\", null, \"We will begin by creating a directory for our Flask app.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ mkdir testdeploy\\n$ cd testdeploy\\n\")), mdx(\"p\", null, \"Next we will create a virtual environment which we will call \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"venv\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ python3 -m venv venv\\n\")), mdx(\"p\", null, \"A virtual environment allows us to download packages for use with this, or any, single project without impacting our work in other Python projects on our computer or remote server. If you are programming a lot in Python you will need to get into the habit of entering the following command any time you start working on a particular project:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ source venv/bin/activate\\n\")), mdx(\"p\", null, \"If this command worked, your commandline will now look like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ ___\\n\")), mdx(\"p\", null, \"Now that your virtual environment is created and activated, you can install Flask with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ pip install flask\\n\")), mdx(\"p\", null, \"Pip defaults to installing the latest version of Flask (which as of the date of writing is Flask 2.0.2).\"), mdx(\"p\", null, \"Congratulations, you have now installed Flask in a virtual environment on your local machine.\"), mdx(\"h3\", null, \"Minimal Flask Application\"), mdx(\"p\", null, \"In the next step, we will be making a Flask application for practice on our local machine. The structure of a Flask application, that is, the names and relative locations of files and directories inside the project folder is almost as important to Flask function as the code itself: so you will need to pay careful attention to the directory structure you\\u2019ve created as we go. If you named your toplevel directory structure \\u201Ctestdeploy\\u201D as shown above you\\u2019re prompt should look like this (if not navigate to that directory now):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ username@yourpc: ~/testdeploy\\n\")), mdx(\"p\", null, \"From this starting point, we are going to create a subdirectory called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" that will be the home of our application and for the bulk of our application files.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ mkdir app\\n\")), mdx(\"p\", null, \"Next create a file called \", \"_\", \"_\", \"init\", \"_\", \"_\", \".py inside the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" directory with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ cd app\\n(venv) $ touch __init__.py  #creates __init__.py file\\n\")), mdx(\"p\", null, \"Now with your text editor open up the \", \"_\", \"_\", \"init\", \"_\", \"_\", \".py file and put in the following text:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"from flask import Flask\\n\\napp = Flask(__name__)\\n\\nfrom app import routes\\n\")), mdx(\"p\", null, \"Confusingly, we have just now introduced two things named \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \": one is a directory named \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" containing the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" package and the other is a Flask application object. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/app\"), \" directory refers to the folder containing the files directly related to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" package. In the code you have written thus far, you have referred to this package in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/app\"), \" directory name and in the last line of the snippet of code you just wrote: \\u201Cfrom app import routes\\u201D. This line refers to the package \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" and a file in it called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes.py\"), \" which we have not yet created but soon will.\"), mdx(\"p\", null, \"The other \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" is the one referenced in the second line of code just written(\\u201Capp=Flask(\", \"_\", \"_\", \"name\", \"_\", \"_\", \")\\u201D). THIS \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" creates the Flask application object as an instance of class Flask that we imported from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flask\"), \" package in the first line of the above code. A Flask application object is a datastructure that contains all the basic ingredients that YOUR particular Flask instance will use as it performs its basic functions.\"), mdx(\"p\", null, \"Before moving on, I will draw your attention to the peculiar import statement for the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \" module at the bottom of the script instead of at the top as it the common practice. We will very soon be writing the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes.py\"), \" file and when we do it will need access to the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \", the Flask object kind. Since \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes.py\"), \" needs access to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" needs access to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes.py\"), \" at almost the same time, we have a case of circular imports. And the way we are choosing to deal with the problem of circular imports here is to wait to import \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \" until after we have created the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app\"), \" (ie in \\u201Capp = Flask(\", \"_\", \"_\", \"name\", \"_\", \"_\", \")).\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes\"), \" module will contain the different URLs that the application implements and that provide the basic structure to the application (think: a website\\u2019s pages) that you and your site\\u2019s visitors will experience. Thus:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ ~/testdeploy/app touch routes.py\\n\")), mdx(\"p\", null, \"Then we will write the following code into \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"routes.py\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"from app import app\\n\\n@app.routes('/')\\n@app.routes('/index')\\ndef index():\\n      return 'Hello World'\\n\")), mdx(\"p\", null, \"What you have just written is called a \\u201Cview function\\u201D, that is, a function that allows you or a user to view a webpage with that webpage defined by the URL given in the lines \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"mailto:_@app.routes\"\n  }, \"_@app.routes\"), \"(\\u2019/\\u2018)\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \" and \"), \"@app.routes(\\u2018/index\\u2019)_.\"), mdx(\"h2\", null, \"show directory structure as we go and refer to v0.1\"), mdx(\"p\", null, \"A minimal Flask application, in this context, means a small amount of code that will allow us to demonstrate and test our configuration on the remote server.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/redmonroe/deploy-linux/tree/v0.1\"\n  }, \"link to github v1 #todo\")), mdx(\"p\", null, \"Soon enough we will be sending the code to your remote. However, if this is your first experience with Flask, you may want to clone a copy of the minimal Flask app and experiment with it on your computer at home.\"), mdx(\"p\", null, \"The code for this section can be had at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/redmonroe/deploy-linux/tree/v0.1\"\n  }, \"https://github.com/redmonroe/deploy-linux/tree/v0.1\"), \".\"), mdx(\"h3\", null, \"Finding an Ubuntu Server\"), mdx(\"p\", null, \"If you would like to continue along, you will need to find a server to work on. As of the end of 2021, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.digitalocean.com/\"\n  }, \"Digital Ocean\"), \" will provide you a Ubuntu 20.04 server for around \\\\$5 per month.\"), mdx(\"p\", null, \"Once you have created a new Ubuntu 20.04 server in a Digital Ocean(DO) droplet, you spend a moment to familiarize yourself with the DO administrative controls. The first step you should take to configure your server will require you to know what the IP address of your remote virtual server (what DO calls a \\u201Cdroplet\\u201D).\"), mdx(\"p\", null, \"You can find you IP address either by clicking on \", \"[Your-Project-Name]\", \" under \\u201CProjects\\u201D in the sidebar of the DO admin panel OR by clicking on \\u201CDroplets\\u201D in the sidebar of the DO admin panel.\"), mdx(\"p\", null, \"There you will find - beneath the header \\u201CIP Address\\u201D - the address in the form XX.XXX.XXX.XX. Make sure you can find this address as you will be using it in the following sections.\"), mdx(\"p\", null, \"Further Reading:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\"\n  }, \"DigitalOcean server configuration tutorial\"))), mdx(\"h3\", null, \"Login via SSH\"), mdx(\"p\", null, \"Since your server is headless, you will not have a desktop interface that you may be used to on your own computer. Instead you will connect to your remote server from your terminal through an SSH client and send instructions to your server via the commandline. WSL2 provides SSH (OpenSSH) by default.\"), mdx(\"p\", null, \"To verify installation of OpenSSH, from your local computer commandline:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" $ ssh -V\\n\\n# should return something like\\n# \\\"OpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\\\"\\n\\n# Alternately, you can get a list of all packages installed\\n# by using: dpkg --list.  Scrolling down you some ways should show\\n# you packages called \\\"openssh-client\\\" and \\\"openssh-server\\\".\\n\")), mdx(\"p\", null, \"Using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ssh\"), \" with your server\\u2019s IP address from the command-line, you will now be able to log into your remote server using the DO IP address that you obtained above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ssh root@<your-server-ip-address>\\n\")), mdx(\"p\", null, \"Congratulations you are now logged into your remote server.\"), mdx(\"h3\", null, \"Passwordless Login\"), mdx(\"p\", null, \"Instead of continuing to log in as root (that is, the \\u201Croot\\u201D in ssh root@your-server-ip-address), you will be configuring your server to allow log in without a password. Instead of using a password, you will use public key authentication in order to verify your identity to your remote server. This method is both more convenient and more secure. (Public key authentication is one of the most important inventions of all-time and I recommend learning at least a little about it).\"), mdx(\"p\", null, \"To begin, you should come up with a new username that you would like to use as we proceed for logging into your server. For the purpose of illustration, I will be using the new username of \\u201Cgigaflask\\u201D but you are welcome to substitute your own username. Just make sure you are able to refer to it.\"), mdx(\"p\", null, \"To create a new user and assign necessary privileges:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ adduser -gecos gigaflask\\n\\n# creates new user \\\"gigaflask\\\", -gecos flag disables requirement\\n# to provide information such as name and phone number\\n# for GECOS field in password file\\n\\n$ usermod -aG sudo gigaflask\\n\\n# grants superuser privileges to user \\\"gigaflask\\\"\\n\\n$ su gigaflask\\n\\n# \\\"su\\\" stands for \\\"switch user\\\", so command tells current\\n# command-line session to\\n# switch current user from root to gigaflask.\\n\\n\")), mdx(\"p\", null, \"With the new user \\u201Cgigaflask\\u201D created, the next step is to configure public key authentication. Once this is configured you will no longer have to type a password when logging in to your server from \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ssh\"), \".\"), mdx(\"p\", null, \"Note: Configuring public key authentication is one of the most intimidating steps of configuring a deployment. The process involves manipulating weird, long numbers with terminal commands with which you may not have familiarity. Furthermore, the terms \\u201Ckey\\u201D, \\u201Cauthentication\\u201D, and \\u201Cprivate\\u201D raise the anxiety level; if I do this wrong will hackers get into my server? can I fix this if I mess up? Please rest assured however that nothing you are doing in this step of the deployment is irrevocable. Stripped of the terms of art, the process itself is a simple one.\"), mdx(\"p\", null, \"In the next section, I will walk through the basic steps of generating a public key on your local computer and then configuring your remote server to accept this form of authentication. You may want to read through all the steps before beginning. After we have gone through the steps I will provide some ways to look into the components of public key authentication to determine whether you are configured correctly.\"), mdx(\"p\", null, \"If you have been following along with this project, you will still be logged into the remote after creating the new user \\u201Cgigaflask\\u201D. Since the next step requires that you create a private key on your local computer, you will need to open a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"second terminal window\"), \" (and do not log into the remote server).\"), mdx(\"p\", null, \"In the second terminal window, we will be checking the contents of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"~/.ssh\"), \" directory to determine whether or not you ALREADY have a private key.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ls ~/.ssh  # lists contents of ~/.ssh folder\\n\\n\")), mdx(\"p\", null, \"If the result of the above command returns \", mdx(\"i\", null, \"id_rsa\"), \" and \", mdx(\"i\", null, \"id_rsa.pub\"), \" then you already have a key and can use this key to configure the remote server.\"), mdx(\"p\", null, \"However, if the above command does not return the two files OR if you do not have an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"~/.ssh\"), \" directory at all, you will need to create an SSH keypair by using a utility called \", mdx(\"i\", null, \"ssh-keygen\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ssh-keygen\\n# command to start the procedure for creating a keygen\\n\\n\")), mdx(\"p\", null, \"After you have finished the ssh-keygen steps, you should check that you have an \", mdx(\"i\", null, \"~/.ssh\"), \" directory, an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"id_rsa\"), \" file, and an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"id_rsa.pub\"), \" file by checking the contents of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/.ssh\"), \" folder.\"), mdx(\"p\", null, \"The \", mdx(\"i\", null, \"id_rsa.pub\"), \" file is your public key (notice .pub ending) and this is the key you will provide to your remote server in the next step. DigitalOcean and other third parties will use this key as a way to verify your identity. The \", mdx(\"i\", null, \"id_rsa\"), \" file is your private key, you will keep this file and its cryptographic contents on your computer. You should not give this key to anyone.\"), mdx(\"p\", null, \"In the next step, we will use the \", mdx(\"i\", null, \"cat\"), \" command to view the contents of your public key file (\", mdx(\"i\", null, \"id_rsa.pub\"), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ cat ~/.ssh/id_rsa.pub\\n\\n# if you were successful generating a\\n# private key in the prior step you will\\n# see a very long series of letters and\\n# numbers that is the content of your\\n# public rsa key followed by your laptop name.\\n\\n# example public key output, actual output many lines long:\\nssh-rsa AAAAB3NzaD1fc2EAAABAQCjw....F9lXv5f/9+8YD joe@joelaptop\\n\")), mdx(\"p\", null, \"In the next step we will be copying this key to a location in the directory structure of your remote server.\"), mdx(\"p\", null, \"Thus, first copy to the clipboard the public key you just generated. Then, return to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"original terminal window\"), \" (the one logged into the remote server) and issue the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ echo <paste-YOUR-public-key> >> ~/.ssh/authorized_keys\\n# the echo command displays a line of text and combined with \\\">>\\\";\\n# it copies the line of text directly into the authorized_keys file\\n\\n$ chmod 600 ~/.ssh/authorized_keys\\n\\n# chmod stands for \\\"change mode of access\\\"\\n# chmod allows a Ubuntu/Linux user to change who\\n# and how much access a user has.\\n\\n# 600 is an argument passed to chmod command.\\n# It gives the owner full read and write access to the target file,\\n# here authorized_keys, while preventing any other user\\n# from accessing the file.\\n\")), mdx(\"p\", null, \"Once you have entered these commands, you will be able to log into your remote server without a password. From now on, when you log in \", mdx(\"i\", null, \"ssh\"), \" will identify itself to the remote server and trigger a cryptographic procedure that requires a public key. The remote server then checks that the procedure is correct and that you are verified by referencing the public key which you have just provided.\"), mdx(\"p\", null, \"To check work, you should first log out of both your \", mdx(\"i\", null, \"ssh\"), \" session and your remote session. Then you will attempt to login directly to your \\u201Cgigaflask\\u201D account by entering, as you have done before:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ssh gigaflask@<your-server-ip-address>\\n\\n\")), mdx(\"p\", null, \"If your work has been successful you should not have to enter a password and (depending on your bash configuration) you will see \", mdx(\"i\", null, \"gigaflask@your-server-ip-address\"), \" at the prompt in your terminal.\"), mdx(\"h3\", null, \"Server Security: First Steps\"), mdx(\"p\", null, \"We are now going to take three steps to reduce the number of routes by which an attacker could gain access to your remote server. First, we are going to disable root logins via \", mdx(\"i\", null, \"ssh\"), \". Second, we are going to disable login for all accounts on the remote server. Third, and finally, we are going to install a firewall on the remote server. Firewall software protects your server by blocking access to the server on ports that are not explicitly enabled by you.\"), mdx(\"p\", null, \"In the next two steps, we are going to be making two small changes to the text in a configuration file located at \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/etc/ssh/sshd_config\"), \".\"), mdx(\"p\", null, \"Because this file is located on your remote server, you will probably not have access to your regular text editor or IDE that you are used to using to make changes in the text. There are many ways to handle this issues; the simplest method is to simply use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nano\"), \" editor that is provided in (nearly) all installations of Linux.\"), mdx(\"p\", null, \"To disable root logins via \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ssh\"), \", first you will log back into your remote server:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ssh gigaflask@your-server-ip-address\\n$ sudo nano /etc/ssh/sshd_config\\n# this will open the SSH configuration file\\n\\n\")), mdx(\"p\", null, \"Once open you should scroll down inside the terminal-based \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nano\"), \" editor window to the line that starts with \\u201CPermitRootLogin\\u201D. There you will change the value to \\u201Cno\\u201D.\"), mdx(\"p\", null, \"The second change you will make is located in the same file. Once you have made this change you will have disabled all password logins for all accounts. Since you have already enabled password-less logins via public key authentication there is no need to permit password authentication on your remote server at all.\"), mdx(\"p\", null, \"To make this change - while still in your \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nano\"), \" session inside \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sshd_config\"), \" - scroll to the line \\u201CPasswordAuthentication\\u201D. There you will change the value to \\u201Cno\\u201D.\"), mdx(\"p\", null, \"To complete the configuration of these two values, you will restart SSH so that the change will take effect.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo service ssh restart\\n# this stops ssh and starts it again; initializing the changes.\\n\\n\")), mdx(\"p\", null, \"The third change you will make is to install a firewall. The following commands install the Uncomplicated Firewall(ufw) and configure it to block access to all ports with the exception of port 22(ssh), port 80(http), and port 443(https) which we will explicitly enable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo apt-get install -y ufw  # installs ufw\\n$ sudo ufw allow ssh  # open port 22\\n$ sudo ufw allow http # open port 80\\n$ sudo ufw allow 443/tcp # open port 443\\n$ sudo ufw --force enable # enable command reloads ufw\\n# and enables firewall on boot, force command disables interactive script\\n\\n\")), mdx(\"p\", null, \"Once you have completed these steps you can check your work with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo ufw status\\n# will show active if your install and configuration were successful.\\n\")), mdx(\"p\", null, \"Further Reading:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ubuntu.com/server/docs/service-openssh\"\n  }, \"OpenSSH Server Documentation from Ubuntu\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tailscale.com/blog/rotate-ssh-keys/\"\n  }, \"how often should I rotate my ssh keys\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"linux tutorial (need to emphasize this)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"why is passwordless more secure?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.tecmint.com/who-is-root-why-does-root-exist-in-linux/\"\n  }, \"Who is root and why does it exist?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://borisreitman.medium.com/diffie-hellman-for-the-layman-7df6095011d9\"\n  }, \"Diffie-Hellman for the Layman\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.linux.com/training-tutorials/introduction-uncomplicated-firewall-ufw/\"\n  }, \"An Introduction to Uncomplicated Firewall\"))), mdx(\"h3\", null, \"Install Dependencies\"), mdx(\"p\", null, \"Since you have deployed into a Ubuntu 20.04 Server on your DigitalOcean remote server, you have a system that - as of the date of this writing - comes with Python 3.8.\"), mdx(\"p\", null, \"In addition to Python, we are going to install additional packages that will add further functionality to our eventual deployment and also make deploying more convenient.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo apt-get -y update\\n$ sudo apt-get -y install python3 python3-venv python3-dev\\n$ sudo apt-get -y install supervisor nginx git\\n\")), mdx(\"p\", null, \"why are some from apt-get and some from pip?\"), mdx(\"h3\", null, \"Installing the Application on the Remote Server\"), mdx(\"p\", null, \"In this step we will deplou our application source code to the remote server. To download (or \\u201Cclone\\u201D) the application source code to your remote server, make sure that you are logged in via \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ssh\"), \" to the \\u201Cgigaflask\\u201D account on the remote server. Then:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ git clone -b v0.1 https://www.github.com/redmonroe/deploy-linux\\n$ cd deploy-linux\\n\")), mdx(\"p\", null, \"These commands download the code and will install it on the remote server. Since we using a minimal Flask application to demonstrate deployments rather than the functionality of Flask, we are using only a tiny packet of Flask code to run our application.\"), mdx(\"p\", null, \"In the next set of commands, we will be activating a virtual environment and installing the dependencies list in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"requirements.txt\"), \" file you have just cloned from the Github repository.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ python3 -m venv venv # create the virtual environment\\n$ source venv/bin/activate # activate the virtual environment\\n$ (venv) $ pip install -r requirements.txt  # install contents of requirements.txt into the virtual environment\\n\")), mdx(\"p\", null, \"Additionally, we are going to install a further package from pip for our production deployment. The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \" package (short for, green unicorn, I am told) is a production web server for Python applications.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ pip install gunicorn\\n\")), mdx(\"p\", null, \"Finally, we will need to update the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".env\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"config.py\"), \" files. In the repository you clone you should see a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sample-config.py\"), \" file. We may make modifications to this file in future chapters but for now it is enough to simple change the name of the file with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ mv sample-config.py config.py  # renames file\\n\")), mdx(\"p\", null, \"Since it is generally not a good practice to include \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".env\"), \" files in public repositories, you will need to create it on your remote.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ touch .env\\n\")), mdx(\"p\", null, \"Now you can use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nano\"), \" to edit with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ sudo nano .env\\n\")), mdx(\"p\", null, \"And add the following two lines:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"FLASK_APP='deploy.py'  # or the name of your Flask file in your top-level directory\\nFLASK_ENV='development'\\n\")), mdx(\"p\", null, \"If you completed these steps, you will have a Flask app on your remote server and your venv environment will be activated. At this point, you should be able to run the development server that comes with Flask on your remote by typing:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ flask run\\n\")), mdx(\"p\", null, \"If all is working as it should, you will see the Flask return a little message telling you that it is \\u201CServing Flask app at \\u2018deploy.py\\u2019\\u201D and that \\u201CEnvironment: development\\u201D.\"), mdx(\"h3\", null, \"Setting up Gunicorn and Supervisor\"), mdx(\"p\", null, \"When you started your Flask server with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flask run\"), \", you are using the simple development server that comes with Flask. While useful in development, this server is not designed with the functionality and performance needed for a production server. Instead we will ust \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \", a Python webserver, widely used for serving in production.\"), mdx(\"p\", null, \"If you want to simply start \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \", you can use the following command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ gunicorn -b localhost:8000 -w 4 [WHICH ONE IS THIS: WHICH ONE IS THIS]\\n\")), mdx(\"p\", null, \"In the above command, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-b\"), \" tells \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \" on which port to listen for requests, here port 8000. The flag \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-w\"), \" configures how many workers \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \" will run, here we have configured 4. While having more workers will increase the number of clients your application can handle, if you have more workers than can be handled by the amount of RAM on your remote server you will experience performance issues and you will then need to adjust down the number of workers you provide.\"), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"app:app\"), \" argument tells \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \" how to load the application instance. \", \"*\", \"*\", \"*\", \" WHY CAN\\u2019T I GET THIS TO MAP TO GRINBERG\\u2019S CODE V. MY DEPLOY-LINUX CODE?\"), mdx(\"p\", null, \"The main drawback against running \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \" from the command-line is that if your remote server crashes, you will need to manually restart your application. Instead, we are going to use the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supervisor\"), \" package, which we have already installed to ensure that our Flask application starts when the remote server is rebooted.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supervisor\"), \" uses a configuration file that configures what programs to watch and how to restart them when it is necessary. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supervisor\"), \" stores its configuration file in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/etc/supervisor/conf.d/\"), \". We are going to make a configuration file called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"deploy.conf\"), \" and store the following code.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[program:deploy]\\ncommand=/home/gigaflask/deploy-linux/venv/bin/gunicorn -b localhost:8000 -w 4 app:app\\ndirectory=/home/gigaflask/deploy-linux\\nuser=gigaflask\\nautostart=true\\nautorestart=true\\nstopasgroup=true\\nkillasgroup=true\\n\")), mdx(\"p\", null, \"If you used a username other than gigaflask when you configured your username for your remote server, you should substitute that username for \\u201Cgigaflask\\u201D in the above code. Also, if you cloned your own version of the minimal Flask app for this deployment, you will you use that folder name in place of \\u201Cdeploy-linux\\u201D.\"), mdx(\"p\", null, \"//need an edit bad, this is a direct copy paste\\nThe command, directory and user settings tell supervisor how to run the application. The autostart and autorestart set up automatic restarts due to the computer starting up, or crashes. The stopasgroup and killasgroup options ensure that when supervisor needs to stop the application to restart it, it also reaches the child processes of the top-level gunicorn process.\"), mdx(\"p\", null, \"Once you have saved the changes to your new \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supervisor\"), \" configuration file, you can restart the supervisor service with the following command.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo supervisorctl reload\\n\")), mdx(\"p\", null, \"Now your application should be running under the watchful eye of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supervisor\"), \" package.\"), mdx(\"p\", null, \"If you would like to check the status of supervisor, open another terminal and use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ssh\"), \" to log into your remote, then enter:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo service supervisor status\\n\")), mdx(\"h3\", null, \"Domain Name and DNS\"), mdx(\"p\", null, \"Because we are going to use our domain name in the configuration of nginx, our production server. The next step is to set up our domain name and link our DigitalOcean server to our new domain. There are many sites from which you can obtain a domain name, both paid and free. While I do not endorse any site, I have experience with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"www.namecheap.com\"\n  }, \"Namecheap\"), \" so if you\\u2019d like to follow along, we will be using that site.\"), mdx(\"p\", null, \"You will be required to pay Namecheap for a domain name. The costs for this domain name starts around $5.  I was able to get a domain in the name of my business for about $8 a year (at least for the first year).\"), mdx(\"h3\", null, \"Configuring Nginx: SSL Certificate\"), mdx(\"p\", null, \"Your Flask application is now served by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"gunicorn\"), \" on its own private 8000 port according to the configuration code you wrote into the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"supervisor\"), \" configuration file in the prior passage. To continue your deployment, you will next need to expose your application to the wider world by enabling another web server, called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"nginx\"), \", to allow access via ports 80 and 443. If you remember these are the same ports that you configured your firewall to open.\"), mdx(\"p\", null, \"We are going to configure port 80 to forward all traffic to port 443; port 443 being the channel for encrypted traffic under HTTPS. In order to use HTTPS, you will need an SSL certificate. Later, we will walk through the process of obtaining a REAL SSL certificate from the certification authority \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Let\\u2019s Encrypt\"), \" but for now we will use a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"self-signed SSL certificate\"), \". This is sufficient for our purposes of practicing the steps of deployment. However, please be aware that with a self-signed certificate your browser will warn you and any users of the site that the certificate is not trusted.\"), mdx(\"p\", null, \"In any case, the following command will create an SSL certificate for your project. You should execute these commands from the toplevel directory of your Flask project on your remote server. Be aware: the following command is going to ask you for information about your application and your identity that will be included in the SSL certificate. Web browsers will show this information to users if they request to see it (by, for example, clicking on the little lock icon in the far left of the Chrome Omnibar).\"), mdx(\"p\", null, \"From the toplevel directory of your Flask app:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ mkdir certs # make a new directory called \\\"certs\\\"\\n$ openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 -keyout certs/key.pem -out certs/cert.pem\\n\")), mdx(\"p\", null, \"This command will start an little animation in your terminal while it is generating a new RSA key, which it will write to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"certs/key.pem\"), \" in the toplevel directory of your app. The command will then \\u2026 ASK YOU QUESTIONS {START HERE}\"), mdx(\"p\", null, \"This command results in to files being created in your project\\u2019s root directory called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"key.pem\"), \" and another in the folder just created called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"certs\"), \" called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cert.pem\"), \". To verify the existence of these files, you can check with:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ ls -a  # you should see a file called key.pem and a sub-directory called certs.\\n\")), mdx(\"h3\", null, \"Configuring Nginx: Nginx Config File\"), mdx(\"p\", null, \"In order to serve your project with nginx, you will need to create an nginx configuration file.\"), mdx(\"p\", null, \"The directory for the configuration for your DigitalOcean installation is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/etc/nginx/sites-enabled/\"), \". Since nginx at installation installs a test site in this folder, the first step we are going to take is to remove this file, which we do not need. This is done with the following command:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo rm /etc/nginx/sites-enabled/default\\n\")), mdx(\"p\", null, \"The next step is to configure nginx. If this is your first time deploying to a remote server, this is perhaps the most difficult step. The configuration file is written in a language that is likely unfamiliar to you, there are numerous location in the config file where you must substitute your paths and package names, and - unless your website works perfectly after you save this file for the first time - it can feel difficult to get feedback from nginx about which line is causing the problem.\"), mdx(\"p\", null, \"To mitigate the pain of this circumstance, I am first going to show you the text of the configuration file that you should use together with comments about what each section of the configuration file is configuring. Later, I will give you some simple ways to introspect the nginx server\\u2019s status on your remote so that if something is not working you can narrow down the causes. Finally, I will provide additional sources that I found useful during my first deploy and in my research for this book.\"), mdx(\"p\", null, \"For the first step, you are going to write the configuration in the directory referenced above \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"/etc/nginx/sites-enabled\"), \" in a file called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"deploy-linux\"), \". The content of the file should be as follows:\\n{your_domain}\"), mdx(\"i\", null, \"/etc/nginx/sites-enabled/deploy-linux\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"server {\\n        listen 80;\\n        listen [::]:80;\\n\\n        root /var/www/{your_domain}/html;\\n        index index.html index.htm index.nginx-debian.html;\\n\\n        server_name {your_domain}.com www.{your_domain}.com;\\n\\n        location / {\\n        # forward application requests to the gunicorn server/manually added by me; not certbot\\n        proxy_pass http://localhost:8000;\\n        proxy_redirect off;\\n        proxy_set_header Host $host;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n    }\\n\\n\")), mdx(\"p\", null, \"//fix the comments in the config\\nnginx -t thing, what is that put that in\"), mdx(\"p\", null, \"After you have saved this file, you will need to reload the configuration file in order to activate it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo service nginx reload\\n\")), mdx(\"p\", null, \"Your application is now deployed. But it is not time for congratulations just yet. To check the deployment, you can enter the IP address of your server or, if you have configured your domain name with Namecheap and DigitalOcean, you can enter the domain name in browser address bar. Since you only have a self-signed certificate, you should expect a warning from your browswer which you will need to click through.\"), mdx(\"p\", null, \"In a following chapter, we will learn how to configure a proper SSL certificate for free with Let\\u2019s Encrypt. However, first, I would like to cover some ways to troubleshoot your nginx configuration if you were not able to deploy and view your application.\"), mdx(\"h3\", null, \"Troubleshooting Nginx Configuration\"), mdx(\"p\", null, \"If you find that your configuration is not serving your application properly, the following commands may be useful:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"$ sudo apt-get install nginx //command to install nginx\\n$ sudo service nginx status //check status of nginx server, will show green \\\"active\\\" if ok.\\n$ systemctl service nginx //same as above\\n$ sudo systemctl stop nginx\\n$ sudo systemctl start nginx\\n$ sudo systemctl restart nginx\\n$ sudo systemctl reload nginx //use if you are only making configuration changes\\n$ sudo systemctl disable nginx  //disable nginx from starting at boot\\n$ sudo systemctl enable nginx //re-enable nginx to start at boot\\n\\n//have nginx check configuration file\\n$ sudo nginx -t //should return \\\"nginx: ... syntax is ok\\\" if not\\nyou probably need to double check your configuration file.\\n\\n//firewall commands\\n\\n$ sudo ufw status //check status of firewall\\n$ sudo ufw app list //check open ports:\\n\")), mdx(\"h3\", null, \"Nginx Further Reading\"), mdx(\"p\", null, \"-\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04#step-5-%E2%80%93-setting-up-server-blocks-(recommended)\"\n  }, \"How to Install Nginx on Ubuntu 20.04\")), mdx(\"p\", null, \"-\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://nginx.org/en/docs/beginners_guide.html#:~:text=By%20default%2C%20the%20configuration%20file,%2Flocal%2Fetc%2Fnginx%20.\"\n  }, \"Nginx Docs\"), \" very useful but far from easy reading\"), mdx(\"h3\", null, \"Pushing Updates to Your Remote Server\"), mdx(\"p\", null, \"Since our minimal Flask application is so limited in function, it is likely you will want to add features in the code. If you do make such changes, you can use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"git pull\"), \" from the remote server to download the new commits made since the prior deployment.\"), mdx(\"p\", null, \"However, simply downloading the code to the remote is not sufficient to upgrade, the server processes will continue running the old code stored in memory.\"), mdx(\"p\", null, \"Instead, you will need to stop the current server and force the server to read the new code and then restart the server. Most upgrades that you will do to a site will include action like updating the database but to push simple changes like styling or minor changes in code, you can use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(venv) $ git pull  //downloads new code version\\n(venv) $ sudo supervisorctl stop deploy-linux //stops the server, sub your app name as appropriate\\n(venv) \\\\$ sudo supervisorctl start deploy-linux //starts new server\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"flask giga tutorial","date":"December 31, 2021","description":"in-depth deployment tutorial for Flask, Python, Postgres, Digital Ocean, Nginx, Gunicorn and more!"}}},"pageContext":{"slug":"/flask-gigatutorial/","previous":null,"next":null}},"staticQueryHashes":["3663586608","63159454"]}